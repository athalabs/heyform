export const LANGUAGES = {
  en: 'English',
  de: 'German',
  fr: 'French',
  ja: 'Japanese',
  pl: 'Polish',
  'zh-cn': 'Simplified Chinese',
  'zh-tw': 'Traditional Chinese'
}

const FORM_INTERFACES = `
declare enum FieldKindEnum {
    GROUP = "group", // Nested fields inside a group
    WELCOME = "welcome",
    // Ending screen
    THANK_YOU = "thank_you", // End screen
    STATEMENT = "statement",
    SHORT_TEXT = "short_text", // Default value
    LONG_TEXT = "long_text",
    NUMBER = "number",
    YES_NO = "yes_no",
    // Multiple choice
    MULTIPLE_CHOICE = "multiple_choice",
    // Multiple picture choices. You can search for some images from Unsplash.
    PICTURE_CHOICE = "picture_choice",
    FILE_UPLOAD = "file_upload",
    OPINION_SCALE = "opinion_scale",
    RATING = "rating",
    DATE = "date",
    DATE_RANGE = "date_range",
    TIME = "time",
    INPUT_TABLE = "input_table",
    PAYMENT = "payment",
    FULL_NAME = "full_name",
    ADDRESS = "address",
    EMAIL = "email",
    URL = "url",
    PHONE_NUMBER = "phone_number",
    COUNTRY = "country_selector",
    SIGNATURE = "signature",
    LEGAL_TERMS = "legal_terms"
}

interface Choice {
    id: string;
    label: string;

    // Picture choice only
    image?: string;
    icon?: {
        name: string;
        color: string;
        background: string;
    };

    // Quiz
    score?: number;
    isExpected?: boolean;
}

interface Column {
    id: string;
    label: string;
    type?: string;
}

declare enum FieldLayoutAlignEnum {
    INLINE = "inline",
    FLOAT_LEFT = "float_left",
    FLOAT_RIGHT = "float_right",
    SPLIT_LEFT = "split_left",
    SPLIT_RIGHT = "split_right",
    COVER = "cover"
}

interface Layout {
    mediaType?: 'image' | 'video'; // default value is 'image'
    mediaUrl?: string;
    backgroundColor?: string;
    brightness?: number;
    align?: FieldLayoutAlignEnum;
}

interface NumberPrice {
    type: 'number';
    value: number;
}

interface VariablePrice {
    type: 'variable';
    ref: string;
}

interface Property {
    // statement
    showButton?: boolean
    buttonText?: string // The text of the next button
    hideMarks?: boolean
  
    // multiple_choice or picture_choice
    allowOther?: boolean // Whether to allow others，default value is false
    allowMultiple?: boolean // Whether you can select more than one，default value is false
    choices?: Choice[]
    randomize?: boolean // Whether you can randomize the order of choices
    other?: string
  
    // rating or opinion_scale
    shape?: 'star' | 'heart' | 'thumb_up' | 'happy' | 'crown' // Rating icon, default value is "star"
    total?: number // The maximum value that can be rated. For rating default value is "5", for opinion_scale default value is "10"
    start?: number
  
    // opinion_scale
    leftLabel?: string
    centerLabel?: string
    rightLabel?: string
  
    // phone_number
    defaultCountryCode?: string // default value is "US"
  
    // Payment
    currency?: string // default value is "USD"
    price?: NumberPrice | VariablePrice // default value is "{ type: 'number', value: 0 }"
  
    // Date
    format?: string // default value is "MM/DD/YYYY"
    // Allow input time
    allowTime?: boolean // Whether to allow hours to be entered?

    // Time
    timeFormat?: string
    use12Hours?: boolean
  
    // Data
    tableColumns?: Column[]
  
    // Thank You
    redirectUrl?: string
    redirectOnCompletion?: boolean // Whether to allow jumping to redirectUrl after the form is completed?
  }

interface Validation {
    required?: boolean; // Whether the Field is required or not, the default value is "false".
    min?: number; // Minimum selection number
    max?: number; // Maximum selected quantity
    matchExpected?: boolean;
}

interface Field {
    id: string;
    title?: string | any[];
    description?: string | any[];
    kind: FieldKindEnum;
    validations?: Validation;
    properties?: Property;
}

* All ids are generated by nanoid(12).
* If "kind" is "yes_no", then:

field.properties!.choices = [
    {
        id: nanoid(12),
        label: 'Yes'
    },
    {
        id: nanoid(12),
        label: 'No'
    }
]
`

export const CHAT_PROMPT = `
${FORM_INTERFACES}

Form categories:
  - "Survey"
  - "Lead Generation"
  - "Customer Support"
  - "Feedback"
  - "Employee/Job"
  - "Booking & Order"
  - "Marketing"
  - "Registration"
  - "Education"
  - "Event"
  - "Healthcare"
  - "Application"
  - "Questionnaire & Quiz"
  - "Remote Working"
  - "Contact"
  - "Business"
  - "COVID-19"
  - "Poll"
  - "Request"
  - "Banking & Finance"
  - "Donation & Charity"
  - "Research"
  - "Quiz/exam"

Please determine the purpose of the user's input text: "{{prompt}}"

Currently, we allow the following types of actions:

  'FIELD' -
    1. Edit, delete or sort one or more questions's title, description, validations, properties and layout in a form/survey. 
    or 2. Adding question(s) to form/survey and user's input text must include words such as 'create', 'add', 'provide', 'insert' or 'build', like:
      - "Create a job application form to collect candidate details and resumes.",
      - "Customer satisfaction survey to evaluate product quality and customer service.",
      - "Give me an event registration form to collect attendee information."
      - "Build an order form for me to list & sell my products"
      - "Demographic survey gathering age, gender, education, and occupation data."
      - "Market research quiz identifying consumer preferences and purchasing behavior."
      - "Insert/add a rating question/5 questions after the second question."

  'LOGIC' - After meeting certain conditions, navigate/jump/go to other questions. Create, edit or delete one or more logics within a single question or across multiple questions.

  'THEME' - generate fontFamily, colors or styles

If it doesn't fall into any of these categories, classify it as 'UNKNOWN'.

Based on the user's input text and action, generate a response to inform the user that we will be performing the corresponding operation for them and ask them to wait.

If the action is 'UNKNOWN', then respond with: 

"I apologize for any inconvenience. I'm here to assist you with the form questions. If you have any questions about modifying form questions, adding new questions, or adding new logics, please feel free to let me know."

Please output the result without explanation, following this JSON format:

{
  "action": ""
  "message": ""
}

The language of the 'message' is: {{language}}.
Please do not output markdown!
`

export const TRANSLATE_PROMPT = `
Translate this JSON to {{language}} and polish it: {{translations}}.

Please keep all HTML tags and their attributes!
Please do not translate the JSON keys!
Please do not output markdown!
`

export const CREATE_FORM_PROMPT = `
${FORM_INTERFACES}
    
Now, my request is: 
{{topic}}
----------------------------------------------------------------------------

{{if reference}}
----------------------------------------------------------------------------

When generating data, you can refer to the following content:
{reference}

----------------------------------------------------------------------------
{{/if}}

Please keep the number of generated Fields between 5 to 20!.
Please adapt the language of the JSON to match the language of the my request text.
Please generate the corresponding data and return it without explanation, following this format:

{
    "name": "name here",
    "fields": [
        {
            "id": "2sgLirFD41ZP",
            "title": ["title here"],
            "description": [],
            "kind": "short_text",
            "validations": {},
            "properties": {},
            "layout": null
        }
    ]
}

Please do not output markdown!
`

export const CREATE_FIELDS_PROMPT = `
${FORM_INTERFACES}

The form name is:
{{name}}

---------------------------------------------------------------------------------

The questions of the form are as follows:

// type Field[]
{{questions | JSON.stringify}}

{{each questions}}
Question {{$index+1}}: {{$value.id}}
{{/each}}

---------------------------------------------------------------------------------

Now, my request is: 
{{prompt}}

Please only edit specified question(s), or insert/create new question(s) at designated locations, or reorder questions. If one or more new questions are created without a specified position, place them at the end.
Please adapt the language of the JSON to match the language of the my request text.
Please output the corresponding JSON and return it without explanation, following this format:

[
  {
      "id": "2sgLirFD41ZP",
      "title": ["title here"],
      "description": [],
      "kind": "short_text",
      "validations": {},
      "properties": {},
      "layout": null
  }
]

Please do not output markdown!
`

export const THEME_PROMPT = `
The following Google fonts for 'fontFamily' are allowed:

'Inter', 'Public Sans', 'Montserrat', 'Alegreya', 'B612', 'Muli', 'Titillium Web', 'Varela', 'Vollkorn', 'IBM Plex Mono', 'Crimson Text', 'Cairo', 'BioRhyme', 'Karla', 'Lora', 'Frank Ruhl Libre', 'Playfair Display', 'Archivo', 'Spectral', 'Fjalla One', 'Roboto', 'Rubik', 'Source Sans Pro', 'Cardo', 'Cormorant', 'Work Sans', 'Rakkas', 'Concert One', 'Yatra One', 'Arvo', 'Lato', 'Abril Fatface', 'Ubuntu', 'PT Serif', 'Old Standard TT', 'Oswald', 'Open Sans', 'Courier Prime', 'Poppins', 'Josefin Sans', 'Fira Sans', 'Nunito', 'Exo 2', 'Merriweather', 'Noto Sans'

interface FormTheme {
    fontFamily?: string; // default value is 'Inter'
    questionTextColor?: string;
    answerTextColor?: string;
    buttonBackground?: string;
    buttonTextColor?: string;
    backgroundColor?: string;
}

The current theme is:
{{theme}}

Now, my request is: 
{{prompt}}

Please create/edit the theme with random HEX colors. Output a JSON result without explanation, following this format:

{
    "fontFamily": ""
}

Please do not output markdown!
`

export const LOGIC_PROMPT = `
declare enum ComparisonEnum {
    IS = "is",
    IS_NOT = "is_not",
    CONTAINS = "contains",
    DOES_NOT_CONTAIN = "does_not_contain",
    STARTS_WITH = "starts_with",
    ENDS_WITH = "ends_with",
    EQUAL = "equal",
    NOT_EQUAL = "not_equal",
    GREATER_THAN = "greater_than",
    LESS_THAN = "less_than",
    GREATER_OR_EQUAL_THAN = "greater_or_equal_than",
    LESS_OR_EQUAL_THAN = "less_or_equal_than",
    IS_BEFORE = "is_before",
    IS_AFTER = "is_after",
    IS_EMPTY = "is_empty",
    IS_NOT_EMPTY = "is_not_empty"
}
declare enum CalculateEnum {
    ADDITION = "addition",
    SUBTRACTION = "subtraction",
    MULTIPLICATION = "multiplication",
    DIVISION = "division",
    ASSIGNMENT = "assignment"
}
declare enum ActionEnum {
    NAVIGATE = "navigate",
    CALCULATE = "calculate"
}

interface TextCondition {
    comparison: ComparisonEnum.IS | ComparisonEnum.IS_NOT | ComparisonEnum.CONTAINS | ComparisonEnum.DOES_NOT_CONTAIN | ComparisonEnum.STARTS_WITH | ComparisonEnum.ENDS_WITH;
    expected?: string;
}
interface SingleChoiceCondition {
    comparison: ComparisonEnum.IS | ComparisonEnum.IS_NOT;
    expected?: string;
}
interface MultipleChoiceCondition {
    comparison: ComparisonEnum.IS | ComparisonEnum.IS_NOT | ComparisonEnum.CONTAINS | ComparisonEnum.DOES_NOT_CONTAIN;
    expected?: string | string[];
}
interface DateCondition {
    comparison: ComparisonEnum.IS | ComparisonEnum.IS_NOT | ComparisonEnum.IS_BEFORE | ComparisonEnum.IS_AFTER;
    expected?: string;
}
interface NumberCondition {
    comparison: ComparisonEnum.EQUAL | ComparisonEnum.NOT_EQUAL | ComparisonEnum.GREATER_THAN | ComparisonEnum.LESS_THAN | ComparisonEnum.GREATER_OR_EQUAL_THAN | ComparisonEnum.LESS_OR_EQUAL_THAN;
    expected?: number;
}
interface OtherCondition {
    comparison: ComparisonEnum.IS_EMPTY | ComparisonEnum.IS_NOT_EMPTY;
}
interface StringVariableCondition extends TextCondition {
    ref?: string;
}
interface NumberVariableCondition extends NumberCondition {
    ref?: string;
}
type LogicCondition = TextCondition | SingleChoiceCondition | MultipleChoiceCondition | DateCondition | NumberCondition | StringVariableCondition | NumberVariableCondition | OtherCondition;
interface NavigateAction {
    kind: ActionEnum.NAVIGATE;
    fieldId: string;
}
interface NumberCalculateAction {
    kind: ActionEnum.CALCULATE;
    variable: string;
    operator: CalculateEnum.ADDITION | CalculateEnum.SUBTRACTION | CalculateEnum.MULTIPLICATION | CalculateEnum.DIVISION | CalculateEnum.ASSIGNMENT;
    value?: number | string;
    ref?: string;
}
interface StringCalculateAction extends Omit<NumberCalculateAction, 'operator'> {
    operator: CalculateEnum.ADDITION | CalculateEnum.ASSIGNMENT;
}
type LogicAction = NavigateAction | NumberCalculateAction | StringCalculateAction;
interface LogicPayload {
    id: string;
    condition: LogicCondition;
    action: LogicAction;
}
interface Logic {
    fieldId: string; // Reference to Field.id
    payloads: LogicPayload[]; // Logics/rules of question
}

${FORM_INTERFACES}

The questions of the form are as follows:

// type Field[]
{{questions | JSON.stringify}}

{{each questions}}
Question {{$index+1}}: {{$value.id}}
{{/each}}

---------------------------------------------------------------------------------

{{if logics.length > 0}}
The existing logics of the form are as follows:

// type Logic[]
{{logics}}

{{/if}}

---------------------------------------------------------------------------------

Now, my request is:
{{prompt}}

Please only adding, modifying, or deleting logic for specified questions. Do not additionally add, modify, or delete others I haven't mentioned.
Please output the corresponding JSON without explanation, following this format:

* All ids are generated by nanoid(12).
* Return all the logcs.

[
    {
        "fieldId": "xNki5f4y1Qcw",
        "payloads": [
            {
                "id": "Ro1k0vXA8fEf",
                "condition": {
                    "comparison": "is",
                    "expected": "0"
                },
                "action": {
                    "kind": "navigate",
                    "fieldId": "4vc6f6VzP2ib"
                }
            }
        ]
    }
]

Please do not output markdown!
`
